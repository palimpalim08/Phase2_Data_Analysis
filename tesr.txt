# Importiere notwendige Bibliotheken
import re
import nltk
import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer
from sklearn.decomposition import LatentDirichletAllocation, NMF
from nltk.corpus import stopwords

# Herunterladen der NLTK-Daten
nltk.download('stopwords')

# 1. Funktion zur Textbereinigung
def preprocess_text(text):
    # Entferne Sonderzeichen, Zahlen und mache den Text klein
    text = re.sub(r'\W', ' ', text)
    text = re.sub(r'\d+', '', text)
    text = text.lower()

    # Entferne Stopwörter
    stop_words = set(stopwords.words('english'))
    text = ' '.join([word for word in text.split() if word not in stop_words])

    return text

# Lese die Datei und wende die Bereinigung auf die 'Review'-Spalte an
df = pd.read_csv('Restaurant_Reviews.csv')
df['cleaned_review'] = df['Review'].apply(preprocess_text)

# 2. Vektorisierung: Bag of Words (BoW)
bow_vectorizer = CountVectorizer(max_features=1000)
bow_matrix = bow_vectorizer.fit_transform(df['cleaned_review'])

# 2. Vektorisierung: TF-IDF
tfidf_vectorizer = TfidfVectorizer(max_features=1000)
tfidf_matrix = tfidf_vectorizer.fit_transform(df['cleaned_review'])

# 3. Themenextraktion: LDA (Latent Dirichlet Allocation)
lda_model = LatentDirichletAllocation(n_components=5, random_state=42)
lda_topics = lda_model.fit_transform(bow_matrix)

# 3. Themenextraktion: NMF (Non-Negative Matrix Factorization)
nmf_model = NMF(n_components=5, random_state=42)
nmf_topics = nmf_model.fit_transform(tfidf_matrix)

# Funktion, um die Top-Wörter pro Thema zu drucken
def print_top_words(model, feature_names, n_top_words=10):
    for topic_idx, topic in enumerate(model.components_):
        top_words = [feature_names[i] for i in topic.argsort()[:-n_top_words - 1:-1]]
        print(f"Topic {topic_idx + 1}: {', '.join(top_words)}")

# Drucke die Top-Wörter für LDA
print("LDA Themen (mit BoW):")
print_top_words(lda_model, bow_vectorizer.get_feature_names_out())

# Drucke die Top-Wörter für NMF
print("\nNMF Themen (mit TF-IDF):")
print_top_words(nmf_model, tfidf_vectorizer.get_feature_names_out())